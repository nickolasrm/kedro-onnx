"""ONNX datasets."""
import logging
from abc import abstractmethod
from copy import deepcopy
from io import IOBase
from pathlib import PurePosixPath
from typing import Any, Dict, get_args

import fsspec
from kedro.io.core import (
    AbstractVersionedDataSet, DataSetError, Version, get_filepath_str,
    get_protocol_and_path
)

from kedro_onnx.typing import T, OnnxFrameworks, ModelProto
import onnx
import onnxmltools

logger = logging.getLogger(__name__)


class FsspecDataSet(AbstractVersionedDataSet[T, T]):
    """An abstract DataSet for creating a new DataSet using fsspec."""

    DEFAULT_LOAD_ARGS: Dict[str, Any] = {}
    DEFAULT_SAVE_ARGS: Dict[str, Any] = {}

    def __init__(
        self,
        filepath: str,
        load_args: Dict[str, Any] = None,
        save_args: Dict[str, Any] = None,
        version: Version = None,
        credentials: Dict[str, Any] = None,
        fs_args: Dict[str, Any] = None,
    ) -> None:
        """Initializes `fsspec` targeting the given filepath.

        Args:
            filepath: Filepath in POSIX format to a file prefixed with a
                protocol like `s3://`. If prefix is not provided, `file`
                protocol (local filesystem) will b used. The prefix should be
                any protocol supported by `fsspec``. Note: `http(s)`
                doesn't support versioning.
            version: If specified, should be an instance of
                `kedro.io.core.Version`. If its `load` attribute is
                None, the latest version will be loaded. If its ``save``
                attribute is None, save version will be autogenerated.
            credentials: Credentials required to get access to the underlying
                filesystem. E.g. for `GCSFileSystem` it should look like
                `{"token": None}`.
            fs_args: Extra arguments to pass into underlying filesystem class
                constructor (e.g. `{"project": "my-project"}` for
                `GCSFileSystem`), as well as to pass to the filesystem's
                `open` method through nested keys `open_args_load` and
                `open_args_save`.

        Note:
            Here you can find all available arguments for `open`:

            https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open  # noqa: E501
        """
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop("open_args_load", {})
        _fs_open_args_save = _fs_args.pop("open_args_save", {})
        _credentials = deepcopy(credentials) or {}

        protocol, path = get_protocol_and_path(filepath, version)
        if protocol == "file":
            _fs_args.setdefault("auto_mkdir", True)

        self._protocol = protocol
        self._fs: fsspec.AbstractFileSystem = fsspec.filesystem(
            self._protocol, **_credentials, **_fs_args
        )

        super().__init__(
            filepath=PurePosixPath(path),
            version=version,
            exists_function=self._fs.exists,
            glob_function=self._fs.glob,
        )

        # Handle default load and save arguments
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)

        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _describe(self) -> Dict[str, Any]:
        return dict(
            filepath=self._filepath,
            protocol=self._protocol,
            load_args=self._load_args,
            save_args=self._save_args,
            version=self._version,
        )

    @abstractmethod
    def _load_fp(self, fp: IOBase) -> Any:
        pass

    def _load(self) -> Any:
        load_path = get_filepath_str(self._get_load_path(), self._protocol)

        with self._fs.open(load_path, **self._fs_open_args_load) as fp:
            self._load_fp(fp)

    @abstractmethod
    def _save_fp(self, fp: IOBase, data: Any) -> None:
        pass

    def _save(self, data: T) -> None:
        save_path = get_filepath_str(self._get_save_path(), self._protocol)

        with self._fs.open(save_path, **self._fs_open_args_save) as fp:
            self._save_fp(fp, data)

        self._invalidate_cache()

    def _exists(self) -> bool:
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DataSetError:
            return False

        return self._fs.exists(load_path)

    def _release(self) -> None:
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        """Invalidate underlying filesystem caches."""
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)


class ONNXDataSet(FsspecDataSet):
    """Loads and saves ONNX models."""

    def __init__(
        self,
        filepath: str,
        backend: OnnxFrameworks,
        load_args: Dict[str, Any] = None,
        version: Version = None,
        credentials: Dict[str, Any] = None,
        fs_args: Dict[str, Any] = None,
    ) -> None:
        """Initialise OnnxDataSet.

        Args:
            filepath (str): Filepath in POSIX format to a ONNX file prefixed with a
                protocol like `s3://`. If prefix is not provided, `file` protocol
                (local filesystem) will be used. The prefix should be any protocol
                supported by `fsspec`. Note: `http(s)` doesn't support
                versioning.
            backend (OnnxFrameworks): ONNX backend to use. To see the list of
                supported backends, look at `kedro_onnx.typing.OnnxFrameworks`.
            load_args (Dict[str, Any], optional): Arguments for the conversion
                function from `onnxmltools`. Defaults to None.
            version (Version, optional): If specified, should be an instance of
                `kedro.io.core.Version`. If its `load` attribute is None, the
                latest version will be loaded. If its `save` attribute is None,
                save version will be autogenerated. Defaults to None.
            credentials (Dict[str, Any], optional): Credentials required to get
                access to the underlying filesystem. E.g. for `GCSFileSystem`
                it should look like `{"token": None}`.
            fs_args (Dict[str, Any], optional): Extra arguments to pass into
                underlying filesystem class constructor (e.g.
                `{"project": "my-project"}` for `GCSFileSystem`), as well as to
                pass to the filesystem's `open` method through nested keys
                `open_args_load` and `open_args_save`.

        Note:
            Here you can find all available arguments for `open`:

            https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open  # noqa: E501

            All defaults will be preserved, unless overwritten. `mode` argument
            is ignored and overwritten with `rb` or `wb`. Defaults to None.
        """
        super().__init__(
            filepath, load_args, None, version, credentials, fs_args
        )
        self._fs_open_args_load.update({"mode": "rb"})
        self._fs_open_args_save.update({"mode": "wb"})

        assert backend in get_args(OnnxFrameworks),\
            (f"Backend {backend} is not supported. Supported backends are: "
             f"{get_args(OnnxFrameworks)}")
        self._backend = backend

    def _describe(self) -> Dict[str, Any]:
        return dict(backend=self._backend, **super()._describe())

    def _load_fp(self, fp: IOBase) -> ModelProto:
        model: ModelProto = onnx.ModelProto()
        model.ParseFromString(fp.read())
        return model

    def _convert(self, data: Any) -> ModelProto:
        convert_fn = getattr(onnxmltools, f"convert_{self._backend}")
        return convert_fn(data)

    def _save_fp(self, fp: IOBase, data: Any) -> None:
        model = self._convert(data)
        fp.write(model.SerializeToString())
